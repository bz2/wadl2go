//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		www.w3.org/Submission/wadl/wadl.xsd
package wadl

import (
	xml "github.com/metaleap/go-xsd-pkg/www.w3.org/2001/xml.xsd_go"
	xsdt "github.com/metaleap/go-xsd/types"
)

type XsdGoPkgHasAttr_Id_XsdtId_ struct {
	Id xsdt.Id `xml:"id,attr"`
}

type THTTPMethods xsdt.Nmtoken

//	Returns true if the value of this enumerated THTTPMethods is "PUT".
func (me THTTPMethods) IsPut() bool { return me.String() == "PUT" }

//	Returns true if the value of this enumerated THTTPMethods is "HEAD".
func (me THTTPMethods) IsHead() bool { return me.String() == "HEAD" }

//	Returns true if the value of this enumerated THTTPMethods is "DELETE".
func (me THTTPMethods) IsDelete() bool { return me.String() == "DELETE" }

//	Since THTTPMethods is just a simple String type, this merely sets the current value from the specified string.
func (me *THTTPMethods) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since THTTPMethods is just a simple String type, this merely returns the current string value.
func (me THTTPMethods) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to THTTPMethods's alias type xsdt.Nmtoken.
func (me THTTPMethods) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated THTTPMethods is "GET".
func (me THTTPMethods) IsGet() bool { return me.String() == "GET" }

//	Returns true if the value of this enumerated THTTPMethods is "POST".
func (me THTTPMethods) IsPost() bool { return me.String() == "POST" }

type TMethod xsdt.String

//	Since TMethod is just a simple String type, this merely sets the current value from the specified string.
func (me *TMethod) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TMethod is just a simple String type, this merely returns the current string value.
func (me TMethod) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TMethod's alias type xsdt.String.
func (me TMethod) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TMethod is an XSD union-type of several types. This is a simple type conversion to THTTPMethods, but keep in mind the actual value may or may not be a valid THTTPMethods value.
func (me TMethod) ToTHTTPMethods() THTTPMethods { return THTTPMethods(me) }

//	TMethod is an XSD union-type of several types. This is a simple type conversion to XsdtNmtoken, but keep in mind the actual value may or may not be a valid XsdtNmtoken value.
func (me TMethod) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

type XsdGoPkgHasAttr_Name_TMethod_ struct {
	Name TMethod `xml:"name,attr"`
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",innerxml"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Title_XsdtString_ struct {
	Title xsdt.String `xml:"title,attr"`
}

type TxsdDoc struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Title_XsdtString_

	xml.XsdGoPkgHasAttr_Lang
}

//	If the WalkHandlers.TxsdDoc function is not nil (ie. was set by outside code), calls it with this TxsdDoc instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TxsdDoc instance.
func (me *TxsdDoc) Walk() (err error) {
	if fn := WalkHandlers.TxsdDoc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Doc struct {
	Docs []*TxsdDoc `xml:"http://wadl.dev.java.net/2009/02 doc"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Doc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Doc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Doc instance.
func (me *XsdGoPkgHasElems_Doc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Doc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Docs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ResourceType_XsdtAnyURI_ struct {
	ResourceType xsdt.AnyURI `xml:"http://wadl.dev.java.net/2009/02 resource_type,attr"`
}

type XsdGoPkgHasAttr_Rel_XsdtToken_ struct {
	Rel xsdt.Token `xml:"http://wadl.dev.java.net/2009/02 rel,attr"`
}

type XsdGoPkgHasAttr_Rev_XsdtToken_ struct {
	Rev xsdt.Token `xml:"http://wadl.dev.java.net/2009/02 rev,attr"`
}

type TxsdLink struct {
	XsdGoPkgHasElems_Doc

	XsdGoPkgHasAttr_ResourceType_XsdtAnyURI_

	XsdGoPkgHasAttr_Rel_XsdtToken_

	XsdGoPkgHasAttr_Rev_XsdtToken_
}

//	If the WalkHandlers.TxsdLink function is not nil (ie. was set by outside code), calls it with this TxsdLink instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TxsdLink instance.
func (me *TxsdLink) Walk() (err error) {
	if fn := WalkHandlers.TxsdLink; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Doc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Link struct {
	Link *TxsdLink `xml:"http://wadl.dev.java.net/2009/02 link"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Link function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Link instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Link instance.
func (me *XsdGoPkgHasElem_Link) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Link; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Link.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TParamStyle xsdt.String

//	Returns true if the value of this enumerated TParamStyle is "query".
func (me TParamStyle) IsQuery() bool { return me.String() == "query" }

//	Returns true if the value of this enumerated TParamStyle is "matrix".
func (me TParamStyle) IsMatrix() bool { return me.String() == "matrix" }

//	Returns true if the value of this enumerated TParamStyle is "header".
func (me TParamStyle) IsHeader() bool { return me.String() == "header" }

//	Returns true if the value of this enumerated TParamStyle is "template".
func (me TParamStyle) IsTemplate() bool { return me.String() == "template" }

//	Since TParamStyle is just a simple String type, this merely sets the current value from the specified string.
func (me *TParamStyle) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TParamStyle is just a simple String type, this merely returns the current string value.
func (me TParamStyle) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TParamStyle's alias type xsdt.String.
func (me TParamStyle) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TParamStyle is "plain".
func (me TParamStyle) IsPlain() bool { return me.String() == "plain" }

type XsdGoPkgHasAttr_Style_TParamStyle_ struct {
	Style TParamStyle `xml:"style,attr"`
}

type XsdGoPkgHasAttr_Required_XsdtBoolean_False struct {
	Required xsdt.Boolean `xml:"required,attr"`
}

//	Returns the default value for Required -- false
func (me XsdGoPkgHasAttr_Required_XsdtBoolean_False) RequiredDefault() xsdt.Boolean {
	return xsdt.Boolean(false)
}

type XsdGoPkgHasAttr_Path_XsdtString_ struct {
	Path xsdt.String `xml:"path,attr"`
}

type XsdGoPkgHasAttr_Type_XsdtQName_XsString struct {
	Type xsdt.Qname `xml:"type,attr"`
}

//	Returns the default value for Type -- "xs:string"
func (me XsdGoPkgHasAttr_Type_XsdtQName_XsString) TypeDefault() xsdt.Qname {
	return xsdt.Qname("xs:string")
}

type XsdGoPkgHasAttr_Fixed_XsdtString_ struct {
	Fixed xsdt.String `xml:"http://wadl.dev.java.net/2009/02 fixed,attr"`
}

type XsdGoPkgHasAttr_Name_XsdtNmtoken_ struct {
	Name xsdt.Nmtoken `xml:"name,attr"`
}

type XsdGoPkgHasAttr_Repeating_XsdtBoolean_False struct {
	Repeating xsdt.Boolean `xml:"http://wadl.dev.java.net/2009/02 repeating,attr"`
}

//	Returns the default value for Repeating -- false
func (me XsdGoPkgHasAttr_Repeating_XsdtBoolean_False) RepeatingDefault() xsdt.Boolean {
	return xsdt.Boolean(false)
}

type XsdGoPkgHasAttr_Href_XsdtAnyURI_ struct {
	Href xsdt.AnyURI `xml:"href,attr"`
}

type XsdGoPkgHasAttr_Default_XsdtString_ struct {
	Default xsdt.String `xml:"http://wadl.dev.java.net/2009/02 default,attr"`
}

type XsdGoPkgHasAttr_MediaType_XsdtString_ struct {
	MediaType xsdt.String `xml:"mediaType,attr"`
}

type XsdGoPkgHasAttr_Value_XsdtString_ struct {
	Value xsdt.String `xml:"http://wadl.dev.java.net/2009/02 value,attr"`
}

type TxsdOption struct {
	XsdGoPkgHasAttr_Value_XsdtString_

	XsdGoPkgHasElems_Doc

	XsdGoPkgHasAttr_MediaType_XsdtString_
}

//	If the WalkHandlers.TxsdOption function is not nil (ie. was set by outside code), calls it with this TxsdOption instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TxsdOption instance.
func (me *TxsdOption) Walk() (err error) {
	if fn := WalkHandlers.TxsdOption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Doc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Option struct {
	Options []*TxsdOption `xml:"http://wadl.dev.java.net/2009/02 option"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Option function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Option instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Option instance.
func (me *XsdGoPkgHasElems_Option) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Option; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Options {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdParam struct {
	XsdGoPkgHasElems_Doc

	XsdGoPkgHasElem_Link

	XsdGoPkgHasAttr_Style_TParamStyle_

	XsdGoPkgHasAttr_Required_XsdtBoolean_False

	XsdGoPkgHasAttr_Path_XsdtString_

	XsdGoPkgHasAttr_Type_XsdtQName_XsString

	XsdGoPkgHasAttr_Fixed_XsdtString_

	XsdGoPkgHasElems_Option

	XsdGoPkgHasAttr_Name_XsdtNmtoken_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_Repeating_XsdtBoolean_False

	XsdGoPkgHasAttr_Href_XsdtAnyURI_

	XsdGoPkgHasAttr_Default_XsdtString_
}

//	If the WalkHandlers.TxsdParam function is not nil (ie. was set by outside code), calls it with this TxsdParam instance as the single argument. Then calls the Walk() method on 3/13 embed(s) and 0/0 field(s) belonging to this TxsdParam instance.
func (me *TxsdParam) Walk() (err error) {
	if fn := WalkHandlers.TxsdParam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Doc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Link.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Param struct {
	Params []*TxsdParam `xml:"http://wadl.dev.java.net/2009/02 param"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Param function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Param instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Param instance.
func (me *XsdGoPkgHasElems_Param) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Param; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Params {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TuriList xsdt.String

//	Since TuriList is just a simple String type, this merely sets the current value from the specified string.
func (me *TuriList) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TuriList is just a simple String type, this merely returns the current string value.
func (me TuriList) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TuriList's alias type xsdt.String.
func (me TuriList) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TuriList declares a String containing a whitespace-separated list of xsdt.AnyURI values. This Values() method creates and returns a slice of all elements in that list.
func (me TuriList) Values() (list []xsdt.AnyURI) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.AnyURI, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

type XsdGoPkgHasAttr_Profile_TuriList_ struct {
	Profile TuriList `xml:"http://wadl.dev.java.net/2009/02 profile,attr"`
}

type XsdGoPkgHasAttr_Element_XsdtQName_ struct {
	Element xsdt.Qname `xml:"element,attr"`
}

type TxsdRepresentation struct {
	XsdGoPkgHasElems_Doc

	XsdGoPkgHasElems_Param

	XsdGoPkgHasAttr_MediaType_XsdtString_

	XsdGoPkgHasAttr_Href_XsdtAnyURI_

	XsdGoPkgHasAttr_Profile_TuriList_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_Element_XsdtQName_

	// HACK(katco-): Specifically for openstack
	JsonRef xsdt.Qname `xml:"ref,attr"`
}

//	If the WalkHandlers.TxsdRepresentation function is not nil (ie. was set by outside code), calls it with this TxsdRepresentation instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdRepresentation instance.
func (me *TxsdRepresentation) Walk() (err error) {
	if fn := WalkHandlers.TxsdRepresentation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Doc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Representation struct {
	Representations []*TxsdRepresentation `xml:"http://wadl.dev.java.net/2009/02 representation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Representation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Representation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Representation instance.
func (me *XsdGoPkgHasElems_Representation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Representation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Representations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRequest struct {
	XsdGoPkgHasElems_Doc

	XsdGoPkgHasElems_Param

	XsdGoPkgHasElems_Representation
}

//	If the WalkHandlers.TxsdRequest function is not nil (ie. was set by outside code), calls it with this TxsdRequest instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdRequest instance.
func (me *TxsdRequest) Walk() (err error) {
	if fn := WalkHandlers.TxsdRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Doc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Representation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Request struct {
	Request *TxsdRequest `xml:"http://wadl.dev.java.net/2009/02 request"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Request function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Request instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Request instance.
func (me *XsdGoPkgHasElem_Request) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Request; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TstatusCodeList xsdt.String

//	Since TstatusCodeList is just a simple String type, this merely sets the current value from the specified string.
func (me *TstatusCodeList) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TstatusCodeList is just a simple String type, this merely returns the current string value.
func (me TstatusCodeList) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TstatusCodeList's alias type xsdt.String.
func (me TstatusCodeList) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TstatusCodeList declares a String containing a whitespace-separated list of xsdt.UnsignedInt values. This Values() method creates and returns a slice of all elements in that list.
func (me TstatusCodeList) Values() (list []xsdt.UnsignedInt) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.UnsignedInt, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

type XsdGoPkgHasAttr_Status_TstatusCodeList_ struct {
	Status TstatusCodeList `xml:"status,attr"`
}

type TxsdResponse struct {
	XsdGoPkgHasElems_Doc

	XsdGoPkgHasElems_Param

	XsdGoPkgHasElems_Representation

	XsdGoPkgHasAttr_Status_TstatusCodeList_
}

//	If the WalkHandlers.TxsdResponse function is not nil (ie. was set by outside code), calls it with this TxsdResponse instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TxsdResponse instance.
func (me *TxsdResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Representation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Doc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Response struct {
	Responses []*TxsdResponse `xml:"http://wadl.dev.java.net/2009/02 response"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Response function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Response instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Response instance.
func (me *XsdGoPkgHasElems_Response) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Response; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Responses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMethod struct {
	XsdGoPkgHasAttr_Name_TMethod_

	XsdGoPkgHasElems_Doc

	XsdGoPkgHasElem_Request

	XsdGoPkgHasElems_Response

	XsdGoPkgHasAttr_Href_XsdtAnyURI_

	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TxsdMethod function is not nil (ie. was set by outside code), calls it with this TxsdMethod instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdMethod instance.
func (me *TxsdMethod) Walk() (err error) {
	if fn := WalkHandlers.TxsdMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Doc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Request.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Response.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Method struct {
	Methods []*TxsdMethod `xml:"http://wadl.dev.java.net/2009/02 method"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Method function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Method instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Method instance.
func (me *XsdGoPkgHasElems_Method) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Method; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Methods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdInclude struct {
	XsdGoPkgHasElems_Doc

	XsdGoPkgHasAttr_Href_XsdtAnyURI_
}

//	If the WalkHandlers.TxsdInclude function is not nil (ie. was set by outside code), calls it with this TxsdInclude instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdInclude instance.
func (me *TxsdInclude) Walk() (err error) {
	if fn := WalkHandlers.TxsdInclude; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Doc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Include struct {
	Includes []*TxsdInclude `xml:"http://wadl.dev.java.net/2009/02 include"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Include function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Include instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Include instance.
func (me *XsdGoPkgHasElems_Include) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Include; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Includes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGrammars struct {
	XsdGoPkgHasElems_Doc

	XsdGoPkgHasElems_Include
}

//	If the WalkHandlers.TxsdGrammars function is not nil (ie. was set by outside code), calls it with this TxsdGrammars instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGrammars instance.
func (me *TxsdGrammars) Walk() (err error) {
	if fn := WalkHandlers.TxsdGrammars; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Include.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Doc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Grammars struct {
	Grammars *TxsdGrammars `xml:"http://wadl.dev.java.net/2009/02 grammars"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Grammars function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Grammars instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Grammars instance.
func (me *XsdGoPkgHasElem_Grammars) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Grammars; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Grammars.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TresourceTypeList xsdt.String

//	TresourceTypeList declares a String containing a whitespace-separated list of xsdt.AnyURI values. This Values() method creates and returns a slice of all elements in that list.
func (me TresourceTypeList) Values() (list []xsdt.AnyURI) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.AnyURI, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	Since TresourceTypeList is just a simple String type, this merely sets the current value from the specified string.
func (me *TresourceTypeList) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TresourceTypeList is just a simple String type, this merely returns the current string value.
func (me TresourceTypeList) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TresourceTypeList's alias type xsdt.String.
func (me TresourceTypeList) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Type_TresourceTypeList_ struct {
	Type TresourceTypeList `xml:"http://wadl.dev.java.net/2009/02 type,attr"`
}

type XsdGoPkgHasAttr_QueryType_XsdtString_ApplicationXWwwFormUrlencoded struct {
	QueryType xsdt.String `xml:"http://wadl.dev.java.net/2009/02 queryType,attr"`
}

//	Returns the default value for QueryType -- "application/x-www-form-urlencoded"
func (me XsdGoPkgHasAttr_QueryType_XsdtString_ApplicationXWwwFormUrlencoded) QueryTypeDefault() xsdt.String {
	return xsdt.String("application/x-www-form-urlencoded")
}

type TxsdResource struct {
	XsdGoPkgHasElems_Method

	XsdGoPkgHasElems_Resource

	XsdGoPkgHasElems_Doc

	XsdGoPkgHasElems_Param

	XsdGoPkgHasAttr_Type_TresourceTypeList_

	XsdGoPkgHasAttr_QueryType_XsdtString_ApplicationXWwwFormUrlencoded

	XsdGoPkgHasAttr_Path_XsdtString_

	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TxsdResource function is not nil (ie. was set by outside code), calls it with this TxsdResource instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdResource instance.
func (me *TxsdResource) Walk() (err error) {
	if fn := WalkHandlers.TxsdResource; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Method.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Doc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Resource struct {
	Resources []*TxsdResource `xml:"http://wadl.dev.java.net/2009/02 resource"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Resource function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Resource instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Resource instance.
func (me *XsdGoPkgHasElems_Resource) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Resource; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Resources {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Base_XsdtAnyURI_ struct {
	Base xsdt.AnyURI `xml:"base,attr"`
}

type TxsdResources struct {
	XsdGoPkgHasElems_Doc

	XsdGoPkgHasElems_Resource

	XsdGoPkgHasAttr_Base_XsdtAnyURI_
}

//	If the WalkHandlers.TxsdResources function is not nil (ie. was set by outside code), calls it with this TxsdResources instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdResources instance.
func (me *TxsdResources) Walk() (err error) {
	if fn := WalkHandlers.TxsdResources; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Doc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Resource.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Resources struct {
	Resourceses []*TxsdResources `xml:"http://wadl.dev.java.net/2009/02 resources"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Resources function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Resources instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Resources instance.
func (me *XsdGoPkgHasElems_Resources) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Resources; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Resourceses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdResourceType struct {
	XsdGoPkgHasElems_Method

	XsdGoPkgHasElems_Resource

	XsdGoPkgHasElems_Doc

	XsdGoPkgHasElems_Param

	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TxsdResourceType function is not nil (ie. was set by outside code), calls it with this TxsdResourceType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TxsdResourceType instance.
func (me *TxsdResourceType) Walk() (err error) {
	if fn := WalkHandlers.TxsdResourceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Method.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Resource.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Doc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ResourceType struct {
	ResourceTypes []*TxsdResourceType `xml:"http://wadl.dev.java.net/2009/02 resource_type"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ResourceType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ResourceType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ResourceType instance.
func (me *XsdGoPkgHasElems_ResourceType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ResourceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ResourceTypes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdApplication struct {
	XsdGoPkgHasElems_ResourceType

	XsdGoPkgHasElems_Method

	XsdGoPkgHasElems_Representation

	XsdGoPkgHasElems_Param

	XsdGoPkgHasElems_Doc

	XsdGoPkgHasElem_Grammars

	XsdGoPkgHasElems_Resources
}

//	If the WalkHandlers.TxsdApplication function is not nil (ie. was set by outside code), calls it with this TxsdApplication instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TxsdApplication instance.
func (me *TxsdApplication) Walk() (err error) {
	if fn := WalkHandlers.TxsdApplication; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Method.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Representation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Doc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Grammars.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Resources.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ResourceType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Application struct {
	Application *TxsdApplication `xml:"http://wadl.dev.java.net/2009/02 application"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Application function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Application instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Application instance.
func (me *XsdGoPkgHasElem_Application) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Application; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Application.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Application struct {
	Applications []*TxsdApplication `xml:"http://wadl.dev.java.net/2009/02 application"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Application function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Application instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Application instance.
func (me *XsdGoPkgHasElems_Application) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Application; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Applications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Doc struct {
	Doc *TxsdDoc `xml:"http://wadl.dev.java.net/2009/02 doc"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Doc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Doc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Doc instance.
func (me *XsdGoPkgHasElem_Doc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Doc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Doc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Grammars struct {
	Grammarses []*TxsdGrammars `xml:"http://wadl.dev.java.net/2009/02 grammars"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Grammars function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Grammars instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Grammars instance.
func (me *XsdGoPkgHasElems_Grammars) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Grammars; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Grammarses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Resources struct {
	Resources *TxsdResources `xml:"http://wadl.dev.java.net/2009/02 resources"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Resources function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Resources instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Resources instance.
func (me *XsdGoPkgHasElem_Resources) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Resources; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Resources.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Resource struct {
	Resource *TxsdResource `xml:"http://wadl.dev.java.net/2009/02 resource"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Resource function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Resource instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Resource instance.
func (me *XsdGoPkgHasElem_Resource) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Resource; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Resource.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ResourceType struct {
	ResourceType *TxsdResourceType `xml:"http://wadl.dev.java.net/2009/02 resource_type"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ResourceType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ResourceType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ResourceType instance.
func (me *XsdGoPkgHasElem_ResourceType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ResourceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ResourceType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Method struct {
	Method *TxsdMethod `xml:"http://wadl.dev.java.net/2009/02 method"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Method function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Method instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Method instance.
func (me *XsdGoPkgHasElem_Method) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Method; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Method.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Include struct {
	Include *TxsdInclude `xml:"http://wadl.dev.java.net/2009/02 include"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Include function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Include instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Include instance.
func (me *XsdGoPkgHasElem_Include) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Include; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Include.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Request struct {
	Requests []*TxsdRequest `xml:"http://wadl.dev.java.net/2009/02 request"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Request function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Request instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Request instance.
func (me *XsdGoPkgHasElems_Request) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Request; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Requests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Response struct {
	Response *TxsdResponse `xml:"http://wadl.dev.java.net/2009/02 response"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Response function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Response instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Response instance.
func (me *XsdGoPkgHasElem_Response) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Response; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Response.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Representation struct {
	Representation *TxsdRepresentation `xml:"http://wadl.dev.java.net/2009/02 representation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Representation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Representation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Representation instance.
func (me *XsdGoPkgHasElem_Representation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Representation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Representation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Param struct {
	Param *TxsdParam `xml:"http://wadl.dev.java.net/2009/02 param"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Param function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Param instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Param instance.
func (me *XsdGoPkgHasElem_Param) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Param; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Option struct {
	Option *TxsdOption `xml:"http://wadl.dev.java.net/2009/02 option"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Option function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Option instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Option instance.
func (me *XsdGoPkgHasElem_Option) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Option; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Option.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Link struct {
	Links []*TxsdLink `xml:"http://wadl.dev.java.net/2009/02 link"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Link function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Link instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Link instance.
func (me *XsdGoPkgHasElems_Link) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Link; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Links {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 43 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 43 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElem_Application     func(*XsdGoPkgHasElem_Application, bool) error
	XsdGoPkgHasElem_Doc             func(*XsdGoPkgHasElem_Doc, bool) error
	XsdGoPkgHasElem_Param           func(*XsdGoPkgHasElem_Param, bool) error
	XsdGoPkgHasCdata                func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElems_Param          func(*XsdGoPkgHasElems_Param, bool) error
	XsdGoPkgHasElems_Method         func(*XsdGoPkgHasElems_Method, bool) error
	TxsdGrammars                    func(*TxsdGrammars, bool) error
	TxsdResources                   func(*TxsdResources, bool) error
	TxsdOption                      func(*TxsdOption, bool) error
	XsdGoPkgHasElems_Option         func(*XsdGoPkgHasElems_Option, bool) error
	XsdGoPkgHasElems_Application    func(*XsdGoPkgHasElems_Application, bool) error
	XsdGoPkgHasElem_Resource        func(*XsdGoPkgHasElem_Resource, bool) error
	XsdGoPkgHasElem_Method          func(*XsdGoPkgHasElem_Method, bool) error
	TxsdDoc                         func(*TxsdDoc, bool) error
	TxsdLink                        func(*TxsdLink, bool) error
	TxsdResponse                    func(*TxsdResponse, bool) error
	TxsdMethod                      func(*TxsdMethod, bool) error
	TxsdInclude                     func(*TxsdInclude, bool) error
	XsdGoPkgHasElem_Resources       func(*XsdGoPkgHasElem_Resources, bool) error
	XsdGoPkgHasElems_Link           func(*XsdGoPkgHasElems_Link, bool) error
	TxsdRequest                     func(*TxsdRequest, bool) error
	XsdGoPkgHasElem_Grammars        func(*XsdGoPkgHasElem_Grammars, bool) error
	XsdGoPkgHasElems_Resource       func(*XsdGoPkgHasElems_Resource, bool) error
	XsdGoPkgHasElems_Resources      func(*XsdGoPkgHasElems_Resources, bool) error
	TxsdApplication                 func(*TxsdApplication, bool) error
	XsdGoPkgHasElem_ResourceType    func(*XsdGoPkgHasElem_ResourceType, bool) error
	XsdGoPkgHasElem_Include         func(*XsdGoPkgHasElem_Include, bool) error
	TxsdResourceType                func(*TxsdResourceType, bool) error
	XsdGoPkgHasElems_Request        func(*XsdGoPkgHasElems_Request, bool) error
	XsdGoPkgHasElem_Representation  func(*XsdGoPkgHasElem_Representation, bool) error
	XsdGoPkgHasElems_Doc            func(*XsdGoPkgHasElems_Doc, bool) error
	XsdGoPkgHasElem_Link            func(*XsdGoPkgHasElem_Link, bool) error
	XsdGoPkgHasElem_Response        func(*XsdGoPkgHasElem_Response, bool) error
	XsdGoPkgHasElem_Option          func(*XsdGoPkgHasElem_Option, bool) error
	XsdGoPkgHasElems_Include        func(*XsdGoPkgHasElems_Include, bool) error
	TxsdResource                    func(*TxsdResource, bool) error
	XsdGoPkgHasElems_ResourceType   func(*XsdGoPkgHasElems_ResourceType, bool) error
	TxsdParam                       func(*TxsdParam, bool) error
	TxsdRepresentation              func(*TxsdRepresentation, bool) error
	XsdGoPkgHasElems_Representation func(*XsdGoPkgHasElems_Representation, bool) error
	XsdGoPkgHasElem_Request         func(*XsdGoPkgHasElem_Request, bool) error
	XsdGoPkgHasElems_Response       func(*XsdGoPkgHasElems_Response, bool) error
	XsdGoPkgHasElems_Grammars       func(*XsdGoPkgHasElems_Grammars, bool) error
}
